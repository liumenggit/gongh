<template>
    <tm-app>
        <canvas style="width: 100vw;height: 100vh" canvas-id="myCanvas" id="myCanvas"></canvas>
        <view class="fixed b-40 l-0 fulled flex-row flex-row-center-between px-50">
            <tm-button label="微信分享" open-type="share" color="white" font-color="#25C89D" :round="10"></tm-button>
            <tm-button @click="saveImage" label="保存到相册" color="white" outlined :round="10"></tm-button>
        </view>
    </tm-app>
</template>

<script setup lang="ts">
import {onReady} from '@dcloudio/uni-app';
import {toast} from '@/tmui/tool/function/util';
import {getCurrentInstance, ref} from 'vue';
import {convertBase64ToFile} from '../../utils/common/base64-to-temp';
import {getBusinessQrcode} from '../../services/api/business';

const proxy = getCurrentInstance()?.proxy ?? null;

const tempFilePath = ref('');

onReady(() => {
    const ctx = uni.createCanvasContext('myCanvas', this);
    const width = uni.upx2px(650);
    const height = uni.upx2px(1100);
    const x = uni.upx2px(50);
    const y = uni.upx2px(50);
    const radius = uni.upx2px(16);
    const y1 = uni.upx2px(150);
    const y2 = uni.upx2px(430);
    const avatarRadius = uni.upx2px(64);
    const qrcodeRadius = uni.upx2px(200);
    const avatarY = uni.upx2px(200);

    var left = 15;
    var top1 = 15;
    var width1 = 345;
    var height1 = 20;
    var borderRadius1 = 10;

    ctx.beginPath();
    ctx.moveTo(left + borderRadius1, top1);
    ctx.lineTo(left + width1 - borderRadius1, top1);
    ctx.quadraticCurveTo(left + width1, top1, left + width1, top1 + borderRadius1);
    ctx.lineTo(left + width1, top1 + height1 - borderRadius1);
    ctx.quadraticCurveTo(left + width1, top1 + height1, left + width1 - borderRadius1, top1 + height1);
    ctx.lineTo(left + borderRadius1, top1 + height1);
    ctx.quadraticCurveTo(left, top1 + height1, left, top1 + height1 - borderRadius1);
    ctx.lineTo(left, top1 + borderRadius1);
    ctx.quadraticCurveTo(left, top1, left + borderRadius1, top1);
    ctx.fillStyle = 'rgba(20, 133, 103, 1)';
    ctx.shadowColor = 'rgba(0, 0, 0, 0.25)';
    ctx.shadowBlur = 4;
    ctx.fill();
    ctx.closePath();

    ctx.save();
    ctx.fillStyle = '#FFFFFF';
    ctx.fillRect(x, y, width, height);


    // 缺口1
    ctx.save();
    ctx.beginPath();
    ctx.arc(x, y1, radius, 0, 2 * Math.PI);
    ctx.closePath();
    ctx.clip();
    ctx.clearRect(x, y, width, height);
    ctx.restore();
    // 缺口2
    ctx.save();
    ctx.beginPath();
    ctx.arc(x + width, y1, radius, 0, 2 * Math.PI);
    ctx.closePath();
    ctx.clip();
    ctx.clearRect(x, y, width, height);
    ctx.restore();
    // 缺口3
    ctx.save();
    ctx.beginPath();
    ctx.arc(x, y2, radius, 0, 2 * Math.PI);
    ctx.closePath();
    ctx.clip();
    ctx.clearRect(x, y, width, height);
    ctx.restore();
    // 缺口3
    ctx.save();
    ctx.beginPath();
    ctx.arc(x + width, y2, radius, 0, 2 * Math.PI);
    ctx.closePath();
    ctx.clip();
    ctx.clearRect(x, y, width, height);
    ctx.restore();
    // 横线
    ctx.beginPath();
    ctx.moveTo(x + radius, y1);
    ctx.lineTo(x + width - radius, y1);
    ctx.strokeStyle = 'rgba(37, 200, 157, 1)';
    ctx.setLineDash([5, 3]);
    ctx.stroke();
    ctx.closePath();
    // 横线
    ctx.beginPath();
    ctx.moveTo(x + radius, y2);
    ctx.lineTo(x + width - radius, y2);
    ctx.strokeStyle = 'rgba(37, 200, 157, 1)';
    ctx.setLineDash([5, 3]);
    ctx.stroke();
    ctx.closePath();

    getBusinessQrcode().send().then((res) => {
        console.log('getShareQrcode');
        convertBase64ToFile(res.src, (tmpimage) => {
            console.log('tmpimage', tmpimage);
            ctx.drawImage(tmpimage, x + (width / 2) - qrcodeRadius, uni.upx2px(470), qrcodeRadius * 2, qrcodeRadius * 2);
            ctx.draw(false, () => {
                uni.canvasToTempFilePath({
                    canvasId: 'myCanvas',
                    success: (res) => {
                        console.log(res.tempFilePath);
                        tempFilePath.value = res.tempFilePath;
                    },
                    fail: function (err) {
                        console.log(err);
                    }
                });
            });
        });
    });
});


const saveImage = () => {
    uni.saveImageToPhotosAlbum({
        filePath: tempFilePath.value,
        success() {
            toast('保存成功');
        },
        fail(e) {
            console.log('fail', e);
            toast('保存失败');
        }
    });
};
</script>

<style scoped>
</style>
