<template>
    <tm-app>
        <tm-text :label="weight" :font-size="60"/>
    </tm-app>
</template>

<script setup lang="ts">

import {onLoad} from '@dcloudio/uni-app';
import {ref} from 'vue';
// import uni from '@dcloudio/vite-plugin-uni';
const deviceId = ref('');
const weight = ref(0);
onLoad(() => {
    console.log('onload');
    //初始化蓝牙模块
    uni.openBluetoothAdapter({
        success(res) {
            console.log('初始化蓝牙', res);
            uni.startBluetoothDevicesDiscovery({
                success(res) {
                    console.log('开始搜索', res);
                    uni.onBluetoothDeviceFound(found);
                },
                fail(err) {
                    console.log('搜索失败');
                    console.error(err);
                }
            });
        },
        fail(err) {
            uni.showToast({
                title: '请检查是否已开启蓝牙',
                icon: 'none',
                duration: 1500
            });
        }
    });

});

/**
 * 2D9FB78B-4DE8-BE87-2B9C-57453A6538A3
 * 0000FFE0-0000-1000-8000-00805F9B34FB
 * @param res
 */
const found = (res: any) => {
    console.log('回调信息', res, res.devices[0].deviceId);
    if (res.devices[0].name === 'BT04-A') {
        console.log('匹配到设备进行链接');
        deviceId.value = res.devices[0].deviceId;
        uni.createBLEConnection({
            deviceId: deviceId.value,
            success(res) {
                console.log('连接成功');
                console.log(res);
                // 停止搜索
                console.log('关闭搜索');
                uni.stopBluetoothDevicesDiscovery({
                    success(res) {
                        console.log('关闭成功', res);
                    }, fail(err) {
                        console.log('关闭失败', err);
                    }
                });
                console.log('获取服务');
                uni.getBLEDeviceServices({
                    deviceId: deviceId.value, // 设备ID，在上一步【4】里获取
                    success(res) {
                        console.log('服务信息', res);
                        // res.services.forEach((item) => {
                        //     console.log('服务uuid', item.uuid);
                        //
                        // });
                        uni.getBLEDeviceCharacteristics({
                            deviceId: deviceId.value, // 设备ID，在【4】里获取到
                            serviceId: '0000FFE0-0000-1000-8000-00805F9B34FB', // 服务UUID，在【6】里能获取到
                            success(res) {
                                // 0000FFE1-0000-1000-8000-00805F9B34FB uuid
                                // 0000FFE0-0000-1000-8000-00805F9B34FB serviceId
                                console.log('服务特征', res);
                                uni.notifyBLECharacteristicValueChange({
                                    deviceId: deviceId.value, // 设备ID，在【4】里获取到
                                    serviceId: '0000FFE0-0000-1000-8000-00805F9B34FB', // 服务UUID，在【6】里能获取到
                                    characteristicId: '0000FFE1-0000-1000-8000-00805F9B34FB', // 特征值，在【7】里能获取到
                                    state: true,
                                    success(res) {
                                        console.log('监听消息', res);
                                        uni.onBLECharacteristicValueChange(res => {
                                            // 结果
                                            console.log(res);

                                            // 结果里有个value值，该值为 ArrayBuffer 类型，所以在控制台无法用肉眼观察到，必须将该值转换为16进制
                                            let resHex = ab2hex(res.value);
                                            console.log(resHex);
                                            // 最后将16进制转换为ascii码，就能看到对应的结果
                                            let result = hexCharCodeToStr(resHex);
                                            weight.value = Number(result);
                                            console.log(result);
                                        });
                                    },
                                    fail(err) {
                                        console.error('监听消息错误', err);
                                    }
                                });
                            },
                            fail(err) {
                                console.error('服务特征错误哦', err);
                            }
                        });

                    },
                    fail(err) {
                        console.error('服务信息错误', err);
                    }
                });
            },
            fail(err) {
                console.log('连接失败');
                console.error(err);
            }
        });

    }
};

// function notify() {
//     uni.notifyBLECharacteristicValueChange({
//         deviceId: deviceId.value, // 设备ID，在【4】里获取到
//         serviceId: '0000FFE0-0000-1000-8000-00805F9B34FB', // 服务UUID，在【6】里能获取到
//         characteristicId: '0000FFE1-0000-1000-8000-00805F9B34FB', // 特征值，在【7】里能获取到
//         success(res) {
//             console.log(res);
//         },
//         fail(err) {
//             console.error(err);
//         }
//     });
// }

/**
 * 初始化
 * 搜索
 * 发现
 * 连接
 * 关闭搜索
 * 获取服务
 * 获取特征值
 * notify监听特征
 * 处理消息
 * @param buffer
 * @returns {any}
 */




// ArrayBuffer转16进度字符串示例
function ab2hex(buffer: any) {
    const hexArr = Array.prototype.map.call(
        new Uint8Array(buffer),
        function (bit) {
            return ('00' + bit.toString(16)).slice(-2);
        }
    );
    return hexArr.join('');
}

// 将16进制的内容转成我们看得懂的字符串内容
function hexCharCodeToStr(hexCharCodeStr: any) {
    var trimedStr = hexCharCodeStr.trim();
    var rawStr = trimedStr.substr(0, 2).toLowerCase() === '0x' ? trimedStr.substr(2) : trimedStr;
    var len = rawStr.length;
    if (len % 2 !== 0) {
        alert('存在非法字符!');
        return '';
    }
    var curCharCode;
    var resultStr = [];
    for (var i = 0; i < len; i = i + 2) {
        curCharCode = parseInt(rawStr.substr(i, 2), 16);
        resultStr.push(String.fromCharCode(curCharCode));
    }
    return resultStr.join('');
}
</script>

<style scoped>

</style>
